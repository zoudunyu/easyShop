<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <springProperty scope="context" name="LOG_NAME" source="spring.application.name" defaultValue="spring"/>
    <!-- 日志保存位置, 默认为相对路径logs -->
    <property name="LOG_PATH" value="${LOG_PATH:-${LOG_TEMP:-logs}}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

    <!-- 超过10MBq切割文件 -->
    <property name="LOG_FILE_MAX_SIZE" value="10MB"/>
    <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
    <property name="LOG_FILE_MAX_HISTORY" value="30"/>

    <!-- 开发环境日志级别为INFO/并且开发环境不写日志文件 -->
    <springProfile name="dev">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
        </root>
        <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>
        <logger name="org.hibernate.SQL" level="DEBUG"/>
        <logger name="org.springframework.jdbc.core" level="DEBUG"/>
        <logger name="org.springframework.jdbc.core.StatementCreatorUtils" level="TRACE"/>
        <logger name="com.yj.dao" level="DEBUG"/>
        <logger name="com.yj.tianqing" level="DEBUG"/>
        <logger name="com.yj.client" level="DEBUG"/>
    </springProfile>

    <!-- 生产环境日志级别为INFO/并且记录日志文件 -->
    <springProfile name="prod">
        <!--INFO输出到文件-->
        <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--日志文件输出格式-->
            <encoder>
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>UTF-8</charset>
            </encoder>
            <file>${LOG_PATH}/${LOG_NAME}.info.log</file>
            <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOG_PATH}/${LOG_NAME}.info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <maxFileSize>${LOG_FILE_MAX_SIZE}</maxFileSize>
                <maxHistory>${LOG_FILE_MAX_HISTORY}</maxHistory>
            </rollingPolicy>
        </appender>

        <!--ERROR输出到文件-->
        <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>Error</level>
            </filter>
            <!--日志文件输出格式-->
            <encoder>
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>UTF-8</charset>
            </encoder>
            <file>${LOG_PATH}/${LOG_NAME}.error.log</file>
            <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOG_PATH}/${LOG_NAME}.error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <maxFileSize>${LOG_FILE_MAX_SIZE}</maxFileSize>
                <maxHistory>${LOG_FILE_MAX_HISTORY}</maxHistory>
            </rollingPolicy>
        </appender>

        <root level="INFO">
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </root>
        <logger name="com.yj.tianqing" level="ERROR"/>
    </springProfile>

</configuration>
